import { useEffect, useState, useCallback } from "react";
import { supabase } from "../../lib/supabaseClient";
import { Loader2, PlusCircle, Save } from "lucide-react";
import { notifyError, notifySuccess } from "../../utils/notify";

interface PayrollPeriod {
  id: string;
  date_started: string;
  date_ended: string;
}

interface Employee {
  id: string;
  full_name: string;
  position?: string;
}

interface PayrollItem {
  id: string | null;
  employee_id: string;
  hrs_worked: number;
  rate: number;
  subtotal: number;
  total: number;
  profiles?: {
    full_name?: string;
    position?: string;
  };
}

export default function PayrollItemsTab() {
  const [periods, setPeriods] = useState<PayrollPeriod[]>([]);
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [selectedPeriod, setSelectedPeriod] = useState<string>("");
  const [items, setItems] = useState<PayrollItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);

  /** ðŸ§  Fetch payroll periods */
  const fetchPeriods = async () => {
    const { data, error } = await supabase
      .from("payrolls")
      .select("id, date_started, date_ended")
      .order("date_started", { ascending: false });
    if (error) notifyError(error.message);
    else setPeriods(data || []);
  };

  /** ðŸ‘¥ Fetch employees */
  const fetchEmployees = async () => {
    const { data, error } = await supabase
      .from("profiles")
      .select("id, full_name, position");
    if (error) notifyError(error.message);
    else setEmployees(data || []);
  };

  /** ðŸ“„ Fetch items for selected period */
 const fetchItems = useCallback(async () => {
  if (!selectedPeriod) return;
  setLoading(true);

  const { data, error } = await supabase
    .from("payroll_items")
    .select(`
      id,
      employee_id,
      hrs_worked,
      rate,
      subtotal,
      total,
      profiles(full_name, position)
    `)
    .eq("payroll_id", selectedPeriod)
    .order("created_at", { ascending: false });

  if (error) {
    notifyError(error.message);
  } else {
    const formatted = (data || []).map((item) => {
      const profile =
        Array.isArray(item.profiles) && item.profiles.length > 0
          ? item.profiles[0]
          : item.profiles || {};
      return { ...item, profiles: profile } as PayrollItem;
    });
    setItems(formatted);
  }

  setLoading(false);
}, [selectedPeriod]);


  /** ðŸŒ¿ Initialize */
  useEffect(() => {
    fetchPeriods();
    fetchEmployees();
  }, []);

  useEffect(() => {
    fetchItems();
  }, [fetchItems]);

  /** âž• Add new blank item */
  const handleAddItem = () => {
    if (!selectedPeriod) {
      notifyError("Please select a payroll period first");
      return;
    }
    setItems([
      ...items,
      { id: null, employee_id: "", hrs_worked: 0, rate: 0, subtotal: 0, total: 0 },
    ]);
  };

  /** ðŸ’¾ Save items */
  const handleSaveAll = async () => {
    if (!selectedPeriod) {
      notifyError("Select a payroll period first");
      return;
    }

    setSaving(true);
    try {
      const payload = items
        .filter((i) => i.employee_id)
        .map((i) => ({
          payroll_id: selectedPeriod,
          employee_id: i.employee_id,
          hrs_worked: Number(i.hrs_worked),
          rate: Number(i.rate),
          // subtotal is auto-generated by Postgres
          total: Number(i.hrs_worked) * Number(i.rate),
        }));

      // Replace all items for selected payroll
      await supabase.from("payroll_items").delete().eq("payroll_id", selectedPeriod);

      const { error } = await supabase.from("payroll_items").insert(payload);
      if (error) throw error;

      notifySuccess("Payroll items saved successfully");
      fetchItems();
   } catch (err) {
      if (err instanceof Error) {
        notifyError(err.message);
      } else {
        notifyError("An unexpected error occurred");
      }
    }

    setSaving(false);
  };


  /** ðŸ§® Handle edits inline */
  const updateItem = <K extends keyof PayrollItem>(
    index: number,
    key: K,
    value: PayrollItem[K]
  ) => {
    const updated = [...items];
    updated[index][key] = value;
    if (key === "hrs_worked" || key === "rate") {
      updated[index].subtotal =
        Number(updated[index].hrs_worked) * Number(updated[index].rate);
      updated[index].total = updated[index].subtotal;
    }
    setItems(updated);
  };


  return (
    <div className="space-y-5">
      {/* === Payroll Selector === */}
      <div className="flex flex-col sm:flex-row sm:items-end gap-3">
        <div className="sm:w-1/3">
          <label className="block text-sm font-medium text-green-700 mb-1">
            Select Payroll Period
          </label>
          <select
            value={selectedPeriod}
            onChange={(e) => setSelectedPeriod(e.target.value)}
            className="w-full border border-green-300 rounded-md px-3 py-2 text-sm"
          >
            <option value="">-- Select Period --</option>
            {periods.map((p) => (
              <option key={p.id} value={p.id}>
                {p.date_started} â†’ {p.date_ended}
              </option>
            ))}
          </select>
        </div>

        <button
          onClick={handleAddItem}
          className="flex items-center gap-2 bg-green-700 hover:bg-green-800 text-white text-sm font-medium px-4 py-2 rounded-md"
        >
          <PlusCircle size={16} /> Add Item
        </button>

        <button
          onClick={handleSaveAll}
          disabled={saving}
          className="flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium px-4 py-2 rounded-md"
        >
          {saving ? <Loader2 className="animate-spin w-4 h-4" /> : <Save size={16} />}
          Save All
        </button>
      </div>

      {/* === Items Table === */}
      <div className="overflow-x-auto bg-white rounded-md border border-green-100 shadow-sm">
        <table className="min-w-full text-sm text-left">
          <thead className="bg-green-100 text-green-900 font-medium">
            <tr>
              <th className="px-4 py-2">Employee</th>
              <th className="px-4 py-2">Position</th>
              <th className="px-4 py-2 text-right">Hours</th>
              <th className="px-4 py-2 text-right">Rate</th>
              <th className="px-4 py-2 text-right">Subtotal</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr>
                <td colSpan={5} className="text-center py-6 text-green-600">
                  <Loader2 className="animate-spin w-5 h-5 inline-block mr-2" />
                  Loading items...
                </td>
              </tr>
            ) : items.length === 0 ? (
              <tr>
                <td colSpan={5} className="text-center py-6 text-green-600">
                  No items for this period.
                </td>
              </tr>
            ) : (
              items.map((item, i) => (
                <tr key={i} className="border-t border-green-100 hover:bg-green-50">
                  <td className="px-4 py-2">
                    <select
                      value={item.employee_id}
                      onChange={(e) => updateItem(i, "employee_id", e.target.value)}
                      className="border border-green-300 rounded-md px-2 py-1 text-sm w-full"
                    >
                      <option value="">Select employee</option>
                      {employees.map((emp) => (
                        <option key={emp.id} value={emp.id}>
                          {emp.full_name}
                        </option>
                      ))}
                    </select>
                  </td>
                  <td className="px-4 py-2 text-green-700 text-sm">
                    {
                      employees.find((e) => e.id === item.employee_id)?.position ||
                      item.profiles?.position ||
                      "-"
                    }
                  </td>
                  <td className="px-4 py-2 text-right">
                    <input
                      type="number"
                      value={item.hrs_worked || ""}
                      onChange={(e) => updateItem(i, "hrs_worked", Number(e.target.value))}
                      className="border border-green-300 rounded-md px-2 py-1 text-sm w-20 text-right"
                    />
                  </td>
                  <td className="px-4 py-2 text-right">
                    <input
                      type="number"
                      value={item.rate || ""}
                      onChange={(e) => updateItem(i, "rate", Number(e.target.value))}
                      className="border border-green-300 rounded-md px-2 py-1 text-sm w-20 text-right"
                    />
                  </td>
                  <td className="px-4 py-2 text-right font-medium text-green-800">
                    ${(item.subtotal || 0).toLocaleString()}
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
